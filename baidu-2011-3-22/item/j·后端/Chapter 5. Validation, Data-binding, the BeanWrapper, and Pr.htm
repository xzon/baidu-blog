<html><head><title><div class="tit">
  Chapter 5. Validation, Data-binding, the BeanWrapper, and PropertyEditors
</div></title></head><body><div id='tit'>Chapter 5. Validation, Data-binding, the BeanWrapper, and PropertyEditors</div><div id='cate'>j&middot;后端</div><div id='date'>2010年01月20日 星期三 05:45 P.M.</div><div id='page'>19</div><a id='url' href='http://hi.baidu.com/hxzon/blog/item/c48e44a76d6aa69ed043586b.html'>http://hi.baidu.com/hxzon/blog/item/c48e44a76d6aa69ed043586b.html</a><div id='cnt'><div> 
 <div> 
  <div> 
   <div> 
    <h2>Chapter 5. Validation, Data-binding, the BeanWrapper, and PropertyEditors</h2> 
    <p><a href="http://static.springsource.org/spring/docs/2.5.x/reference/validation.html">http://static.springsource.org/spring/docs/2.5.x/reference/validation.html</a></p> 
   </div> 
  </div> 
  <div> 
  </div> 
 </div> 
 <div> 
  <div> 
   <div> 
    <div> 
     <h2><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.1. Introduction</h2> 
    </div> 
   </div> 
   <div> 
   </div> 
  </div> 
  <p>There are pros and cons for considering validation as business logic, and Spring offers a design for validation (and data binding) that does not exclude either one of them. Specifically validation should not be tied to the web tier, should be easy to localize and it should be possible to plug in any validator available. Considering the above, Spring has come up with a Validator interface that is both basic and eminently usable in every layer of an application.</p> 
  <p>Data binding is useful for allowing user input to be dynamically bound to the domain model of an application (or whatever objects you use to process user input). Spring provides the so-called DataBinder to do exactly that. The Validator and the DataBinder make up the validation package, which is primarily used in but not limited to the MVC framework.</p> 
  <p>The BeanWrapper is a fundamental concept in the Spring Framework and is used in a lot of places. However, you probably will not ever have the need to use the BeanWrapper directly. Because this is reference documentation however, we felt that some explanation might be in order. We're explaining the BeanWrapper in this chapter since if you were going to use it at all, you would probably do so when trying to bind data to objects, which is strongly related to the BeanWrapper.</p> 
  <p>Spring uses PropertyEditors all over the place. The concept of a PropertyEditor is part of the JavaBeans specification. Just as the BeanWrapper, it's best to explain the use of PropertyEditors in this chapter as well, since it's closely related to the BeanWrapper and the DataBinder.</p> 
 </div> 
 <div> 
  <div> 
   <div> 
    <div> 
     <h2><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.2. Validation using Spring's Validator interface</h2> 
    </div> 
   </div> 
   <div> 
   </div> 
  </div> 
  <p>Spring's features a Validator interface that you can use to validate objects. The Validator interface works using an Errors object so that while validating, validators can report validation failures to the Errors object.</p> 
  <p>Let's consider a small data object:</p> 
  <pre>public class Person {

  private String name;
  private int age;

  // the usual getters and setters...
}</pre> 
  <p>We're going to provide validation behavior for the Person class by implementing the following two methods of the org.springframework.validation.Validator interface:</p> 
  <div> 
   <ul type="disc" compact="compact"> 
    <li> <p>supports(Class) - Can this Validator validate instances of the supplied Class?</p> </li> 
    <li> <p>validate(Object, org.springframework.validation.Errors) - validates the given object and in case of validation errors, registers those with the given Errors object</p> </li> 
   </ul> 
  </div> 
  <p> </p> 
  <p>Implementing a Validator is fairly straightforward, especially when you know of the ValidationUtils helper class that the Spring Framework also provides.</p> 
  <pre>public class PersonValidator implements Validator {
    
    /**
    * This Validator validates just Person instances
    */
    public boolean supports(Class clazz) {
        return Person.class.equals(clazz);
    }
    
    public void validate(Object obj, Errors e) {
        ValidationUtils.rejectIfEmpty(e, &quot;name&quot;, &quot;name.empty&quot;);
        Person p = (Person) obj;
        if (p.getAge() &lt; 0) {
            e.rejectValue(&quot;age&quot;, &quot;negativevalue&quot;);
        } else if (p.getAge() &gt; 110) {
            e.rejectValue(&quot;age&quot;, &quot;too.darn.old&quot;);
        }
    }
}</pre> 
  <p>As you can see, the static rejectIfEmpty(..) method on the ValidationUtils class is used to reject the 'name' property if it is null or the empty string. Have a look at the Javadoc for the ValidationUtils class to see what functionality it provides besides the example shown previously.</p> 
  <p>While it is certainly possible to implement a single Validator class to validate each of the nested objects in a rich object, it may be better to encapsulate the validation logic for each nested class of object in its own Validator implementation. A simple example of a 'rich' object would be a Customer that is composed of two String properties (a first and second name) and a complex Address object. Address objects may be used independently of Customer objects, and so a distinct AddressValidator has been implemented. If you want your CustomerValidator to reuse the logic contained within the AddressValidator class without recourse to copy-n-paste you can dependency-inject or instantiate an AddressValidator within your CustomerValidator, and use it like so:</p> 
  <pre>public class CustomerValidator implements Validator {

   private final Validator addressValidator;

   public CustomerValidator(Validator addressValidator) {
      if (addressValidator == null) {
          throw new IllegalArgumentException(&quot;The supplied [Validator] is required and must not be null.&quot;);
      }
      if (!addressValidator.supports(Address.class)) {
          throw new IllegalArgumentException(
            &quot;The supplied [Validator] must support the validation of [Address] instances.&quot;);
      }
      this.addressValidator = addressValidator;
   }

    /**
    * This Validator validates Customer instances, and any subclasses of Customer too
    */
   public boolean supports(Class clazz) {
      return Customer.class.isAssignableFrom(clazz);
   }

   public void validate(Object target, Errors errors) {
      ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;firstName&quot;, &quot;field.required&quot;);
      ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;surname&quot;, &quot;field.required&quot;);
      Customer customer = (Customer) target;
      try {
          errors.pushNestedPath(&quot;address&quot;);
          ValidationUtils.invokeValidator(this.addressValidator, customer.getAddress(), errors);
      } finally {
          errors.popNestedPath();
      }
   }
}</pre> 
  <p>Validation errors are reported to the Errors object passed to the validator. In case of Spring Web MVC you can use &lt;spring:bind/&gt; tag to inspect the error messages, but of course you can also inspect the errors object yourself. More information about the methods it offers can be found from the Javadoc.</p> 
 </div> 
 <div> 
  <div> 
   <div> 
    <div> 
     <h2><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.3. Resolving codes to error messages</h2> 
    </div> 
   </div> 
   <div> 
   </div> 
  </div> 
  <p>We've talked about databinding and validation. Outputting messages corresponding to validation errors is the last thing we need to discuss. In the example we've shown above, we rejected the name and the age field. If we're going to output the error messages by using a MessageSource, we will do so using the error code we've given when rejecting the field ('name' and 'age' in this case). When you call (either directly, or indirectly, using for example the ValidationUtils class) rejectValue or one of the other reject methods from the Errors interface, the underlying implementation will not only register the code you've passed in, but also a number of additional error codes. What error codes it registers is determined by the MessageCodesResolver that is used. By default, the DefaultMessageCodesResolver is used, which for example not only registers a message with the code you gave, but also messages that include the field name you passed to the reject method. So in case you reject a field using rejectValue(&quot;age&quot;, &quot;too.darn.old&quot;), apart from the too.darn.old code, Spring will also register too.darn.old.age and too.darn.old.age.int (so the first will include the field name and the second will include the type of the field); this is done as a convenience to aid developers in targeting error messages and suchlike.</p> 
  <p>More information on the MessageCodesResolver and the default strategy can be found online with the Javadocs for <a target="_top" href="http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/validation/MessageCodesResolver.html">MessageCodesResolver</a> and <a target="_top" href="http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/validation/DefaultMessageCodesResolver.html">DefaultMessageCodesResolver</a> respectively.</p> 
 </div> 
 <div> 
  <div> 
   <div> 
    <div> 
     <h2><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.4. Bean manipulation and the BeanWrapper</h2> 
    </div> 
   </div> 
   <div> 
   </div> 
  </div> 
  <p>The org.springframework.beans package adheres to the JavaBeans standard provided by Sun. A JavaBean is simply a class with a default no-argument constructor, which follows a naming convention where (by way of an example) a property named bingoMadness would have a setter method setBingoMadness(..) and a getter method getBingoMadness(). For more information about JavaBeans and the specification, please refer to Sun's website ( <a target="_top" href="http://java.sun.com/products/javabeans/">java.sun.com/products/javabeans</a>).</p> 
  <p>One quite important class in the beans package is the BeanWrapper interface and its corresponding implementation (BeanWrapperImpl). As quoted from the Javadoc, the BeanWrapper offers functionality to set and get property values (individually or in bulk), get property descriptors, and to query properties to determine if they are readable or writable. Also, the BeanWrapper offers support for nested properties, enabling the setting of properties on sub-properties to an unlimited depth. Then, the BeanWrapper supports the ability to add standard JavaBeans PropertyChangeListeners and VetoableChangeListeners, without the need for supporting code in the target class. Last but not least, the BeanWrapper provides support for the setting of indexed properties. The BeanWrapper usually isn't used by application code directly, but by the DataBinder and the BeanFactory.</p> 
  <p>The way the BeanWrapper works is partly indicated by its name: it wraps a bean to perform actions on that bean, like setting and retrieving properties.</p> 
  <div> 
   <div> 
    <div> 
     <div> 
      <h3><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.4.1. Setting and getting basic and nested properties</h3> 
     </div> 
    </div> 
    <div> 
    </div> 
   </div> 
   <p>Setting and getting properties is done using the setPropertyValue(s) and getPropertyValue(s) methods that both come with a couple of overloaded variants. They're all described in more detail in the Javadoc Spring comes with. What's important to know is that there are a couple of conventions for indicating properties of an object. A couple of examples:</p> 
   <div>
    <img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" />
    <p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p> 
    <p>Table 5.1. Examples of properties</p> 
    <table border="1" summary="Examples of properties"> 
     <colgroup>
      <col />
      <col />
     </colgroup> 
     <thead> 
      <tr> 
       <th>Expression</th> 
       <th>Explanation</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>name</td> 
       <td>Indicates the property name corresponding to the methods getName() or isName() and setName(..)</td> 
      </tr> 
      <tr> 
       <td>account.name</td> 
       <td>Indicates the nested property name of the property account corresponding e.g. to the methods getAccount().setName() or getAccount().getName()</td> 
      </tr> 
      <tr> 
       <td>account[2]</td> 
       <td>Indicates the third element of the indexed property account. Indexed properties can be of type array, list or other naturally ordered collection</td> 
      </tr> 
      <tr> 
       <td>account[COMPANYNAME]</td> 
       <td>Indicates the value of the map entry indexed by the key COMPANYNAME of the Map property account</td> 
      </tr> 
     </tbody> 
    </table> 
   </div> 
   <p>Below you'll find some examples of working with the BeanWrapper to get and set properties.</p> 
   <p>(This next section is not vitally important to you if you're not planning to work with the BeanWrapper directly. If you're just using the DataBinder and the BeanFactory and their out-of-the-box implementation, you should skip ahead to the section about PropertyEditors.)</p> 
   <p>Consider the following two classes:</p> 
   <pre>public class Company {
    private String name;
    private Employee managingDirector;

    public String getName() { 
        return this.name; 
    }
    public void setName(String name) { 
        this.name = name; 
    } 
    public Employee getManagingDirector() { 
        return this.managingDirector; 
    }
    public void setManagingDirector(Employee managingDirector) {
        this.managingDirector = managingDirector;
    }
}</pre> 
   <pre>public class Employee {
    private String name;
    private float salary;

    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public float getSalary() {
        return salary;
    }
    public void setSalary(float salary) {
        this.salary = salary;
    }
}</pre> 
   <p>The following code snippets show some examples of how to retrieve and manipulate some of the properties of instantiated Companies and Employees:</p> 
   <pre>BeanWrapper company = BeanWrapperImpl(new Company());
// setting the company name..
company.setPropertyValue(&quot;name&quot;, &quot;Some Company Inc.&quot;);
// ... can also be done like this:
PropertyValue value = new PropertyValue(&quot;name&quot;, &quot;Some Company Inc.&quot;);
company.setPropertyValue(value);

// ok, let's create the director and tie it to the company:
BeanWrapper jim = BeanWrapperImpl(new Employee());
jim.setPropertyValue(&quot;name&quot;, &quot;Jim Stravinsky&quot;);
company.setPropertyValue(&quot;managingDirector&quot;, jim.getWrappedInstance());

// retrieving the salary of the managingDirector through the company
Float salary = (Float) company.getPropertyValue(&quot;managingDirector.salary&quot;);</pre> 
  </div> 
  <div> 
   <div> 
    <div> 
     <div> 
      <h3><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.4.2. Built-in PropertyEditor implementations</h3> 
     </div> 
    </div> 
    <div> 
    </div> 
   </div> 
   <p>Spring heavily uses the concept of PropertyEditors to effect the conversion between an Object and a String. If you think about it, it sometimes might be handy to be able to represent properties in a different way than the object itself. For example, a Date can be represented in a human readable way (as the String '2007-14-09'), while we're still able to convert the human readable form back to the original date (or even better: convert any date entered in a human readable form, back to Date objects). This behavior can be achieved by registering custom editors, of type java.beans.PropertyEditor. Registering custom editors on a BeanWrapper or alternately in a specific IoC container as mentioned in the previous chapter, gives it the knowledge of how to convert properties to the desired type. Read more about PropertyEditors in the Javadoc of the java.beans package provided by Sun.</p> 
   <p>A couple of examples where property editing is used in Spring:</p> 
   <div> 
    <ul type="disc" compact="compact"> 
     <li> <p>setting properties on beans is done using PropertyEditors. When mentioning java.lang.String as the value of a property of some bean you're declaring in XML file, Spring will (if the setter of the corresponding property has a Class-parameter) use the ClassEditor to try to resolve the parameter to a Class object.</p> </li> 
     <li> <p>parsing HTTP request parameters in Spring's MVC framework is done using all kinds of PropertyEditors that you can manually bind in all subclasses of the CommandController.</p> </li> 
    </ul> 
   </div> 
   <p> </p> 
   <p>Spring has a number of built-in PropertyEditors to make life easy. Each of those is listed below and they are all located in the org.springframework.beans.propertyeditors package. Most, but not all (as indicated below), are registered by default by BeanWrapperImpl. Where the property editor is configurable in some fashion, you can of course still register your own variant to override the default one:</p> 
   <div>
    <img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" />
    <p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p> 
    <p>Table 5.2. Built-in PropertyEditors</p> 
    <table border="1" summary="Built-in PropertyEditors"> 
     <colgroup>
      <col />
      <col />
     </colgroup> 
     <thead> 
      <tr> 
       <th>Class</th> 
       <th>Explanation</th> 
      </tr> 
     </thead> 
     <tbody> 
      <tr> 
       <td>ByteArrayPropertyEditor</td> 
       <td>Editor for byte arrays. Strings will simply be converted to their corresponding byte representations. Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>ClassEditor</td> 
       <td>Parses Strings representing classes to actual classes and the other way around. When a class is not found, an IllegalArgumentException is thrown. Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>CustomBooleanEditor</td> 
       <td>Customizable property editor for Boolean properties. Registered by default by BeanWrapperImpl, but, can be overridden by registering custom instance of it as custom editor.</td> 
      </tr> 
      <tr> 
       <td>CustomCollectionEditor</td> 
       <td>Property editor for Collections, converting any source Collection to a given target Collection type.</td> 
      </tr> 
      <tr> 
       <td>CustomDateEditor</td> 
       <td>Customizable property editor for java.util.Date, supporting a custom DateFormat. NOT registered by default. Must be user registered as needed with appropriate format.</td> 
      </tr> 
      <tr> 
       <td>CustomNumberEditor</td> 
       <td>Customizable property editor for any Number subclass like Integer, Long, Float, Double. Registered by default by BeanWrapperImpl, but can be overridden by registering custom instance of it as a custom editor.</td> 
      </tr> 
      <tr> 
       <td>FileEditor</td> 
       <td>Capable of resolving Strings to java.io.File objects. Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>InputStreamEditor</td> 
       <td>One-way property editor, capable of taking a text string and producing (via an intermediate ResourceEditor and Resource) an InputStream, so InputStream properties may be directly set as Strings. Note that the default usage will not close the InputStream for you! Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>LocaleEditor</td> 
       <td>Capable of resolving Strings to Locale objects and vice versa (the String format is [language]_[country]_[variant], which is the same thing the toString() method of Locale provides). Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>PatternEditor</td> 
       <td>Capable of resolving Strings to JDK 1.5 Pattern objects and vice versa.</td> 
      </tr> 
      <tr> 
       <td>PropertiesEditor</td> 
       <td>Capable of converting Strings (formatted using the format as defined in the Javadoc for the java.lang.Properties class) to Properties objects. Registered by default by BeanWrapperImpl.</td> 
      </tr> 
      <tr> 
       <td>StringTrimmerEditor</td> 
       <td>Property editor that trims Strings. Optionally allows transforming an empty string into a null value. NOT registered by default; must be user registered as needed.</td> 
      </tr> 
      <tr> 
       <td>URLEditor</td> 
       <td>Capable of resolving a String representation of a URL to an actual URL object. Registered by default by BeanWrapperImpl.</td> 
      </tr> 
     </tbody> 
    </table> 
   </div> 
   <p>Spring uses the java.beans.PropertyEditorManager to set the search path for property editors that might be needed. The search path also includes sun.bean.editors, which includes PropertyEditor implementations for types such as Font, Color, and most of the primitive types. Note also that the standard JavaBeans infrastructure will automatically discover PropertyEditor classes (without you having to register them explicitly) if they are in the same package as the class they handle, and have the same name as that class, with 'Editor' appended; for example, one could have the following class and package structure, which would be sufficient for the FooEditor class to be recognized and used as the PropertyEditor for Foo-typed properties.</p> 
   <pre>com
  chank
    pop
      Foo
      FooEditor   // the PropertyEditor for the Foo class</pre> 
   <p>Note that you can also use the standard BeanInfo JavaBeans mechanism here as well (described <a target="_top" href="http://java.sun.com/docs/books/tutorial/javabeans/customization/index.html">in not-amazing-detail here</a>). Find below an example of using the BeanInfo mechanism for explicitly registering one or more PropertyEditor instances with the properties of an associated class.</p> 
   <pre>com
  chank
    pop
      Foo
      FooBeanInfo   // the BeanInfo for the Foo class</pre> 
   <p>Here is the Java source code for the referenced FooBeanInfo class. This would associate a CustomNumberEditor with the age property of the Foo class.</p> 
   <pre>public class FooBeanInfo extends SimpleBeanInfo {
      
    public PropertyDescriptor[] getPropertyDescriptors() {
        try {
            final PropertyEditor numberPE = new CustomNumberEditor(Integer.class, true);
            PropertyDescriptor ageDescriptor = new PropertyDescriptor(&quot;age&quot;, Foo.class) {
                public PropertyEditor createPropertyEditor(Object bean) {
                    return numberPE;
                };
            };
            return new PropertyDescriptor[] { ageDescriptor };
        }
        catch (IntrospectionException ex) {
            throw new Error(ex.toString());
        }
    }
}</pre> 
   <div> 
    <div> 
     <div> 
      <div> 
       <h4><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.4.2.1. Registering additional custom PropertyEditors</h4> 
      </div> 
     </div> 
     <div> 
     </div> 
    </div> 
    <p>When setting bean properties as a string value, a Spring IoC container ultimately uses standard JavaBeans PropertyEditors to convert these Strings to the complex type of the property. Spring pre-registers a number of custom PropertyEditors (for example, to convert a classname expressed as a string into a real Class object). Additionally, Java's standard JavaBeans PropertyEditor lookup mechanism allows a PropertyEditor for a class simply to be named appropriately and placed in the same package as the class it provides support for, to be found automatically.</p> 
    <p>If there is a need to register other custom PropertyEditors, there are several mechanisms available. The most manual approach, which is not normally convenient or recommended, is to simply use the registerCustomEditor() method of the ConfigurableBeanFactory interface, assuming you have a BeanFactory reference. Another, slightly more convenient, mechanism is to use a special bean factory post-processor called CustomEditorConfigurer. Although bean factory post-processors can be used with BeanFactory implementations, the CustomEditorConfigurer has a nested property setup, so it is strongly recommended that it is used with the ApplicationContext, where it may be deployed in similar fashion to any other bean, and automatically detected and applied.</p> 
    <p>Note that all bean factories and application contexts automatically use a number of built-in property editors, through their use of something called a BeanWrapper to handle property conversions. The standard property editors that the BeanWrapper registers are listed in <a title="5.4.2.&nbsp;Built-in PropertyEditor implementations" href="http://static.springsource.org/spring/docs/2.5.x/reference/validation.html#beans-beans-conversion">the previous section</a>. Additionally, ApplicationContexts also override or add an additional number of editors to handle resource lookups in a manner appropriate to the specific application context type.</p> 
    <p>Standard JavaBeans PropertyEditor instances are used to convert property values expressed as strings to the actual complex type of the property. CustomEditorConfigurer, a bean factory post-processor, may be used to conveniently add support for additional PropertyEditor instances to an ApplicationContext.</p> 
    <p>Consider a user class ExoticType, and another class DependsOnExoticType which needs ExoticType set as a property:</p> 
    <pre>package example;
  
public class ExoticType {

    private String name;

    public ExoticType(String name) {
        this.name = name;
    }
}

public class DependsOnExoticType { 
   
    private ExoticType type;

    public void setType(ExoticType type) {
        this.type = type;
    }
}</pre> 
    <p>When things are properly set up, we want to be able to assign the type property as a string, which a PropertyEditor will behind the scenes convert into an actual ExoticType instance:</p> 
    <pre>&lt;bean id=&quot;sample&quot; class=&quot;example.DependsOnExoticType&quot;&gt;
    &lt;property name=&quot;type&quot; value=&quot;aNameForExoticType&quot;/&gt;
&lt;/bean&gt;</pre> 
    <p>The PropertyEditor implementation could look similar to this:</p> 
    <pre>// converts string representation to ExoticType object
package example;

public class ExoticTypeEditor extends PropertyEditorSupport {

    private String format;

    public void setFormat(String format) {
        this.format = format;
    }
    
    public void setAsText(String text) {
        if (format != null &amp;&amp; format.equals(&quot;upperCase&quot;)) {
            text = text.toUpperCase();
        }
        ExoticType type = new ExoticType(text);
        setValue(type);
    }
}</pre> 
    <p>Finally, we use CustomEditorConfigurer to register the new PropertyEditor with the ApplicationContext, which will then be able to use it as needed:</p> 
    <pre>&lt;bean class=&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;&gt;
  &lt;property name=&quot;customEditors&quot;&gt;
    &lt;map&gt;
      &lt;entry key=&quot;example.ExoticType&quot;&gt;
        &lt;bean class=&quot;example.ExoticTypeEditor&quot;&gt;
          &lt;property name=&quot;format&quot; value=&quot;upperCase&quot;/&gt;
        &lt;/bean&gt;
      &lt;/entry&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;</pre> 
    <div> 
     <div> 
      <div> 
       <div> 
        <h5><img class="cke_anchor" alt="锚点" src="image/Chapter 5. Validatio.spacer.gif-t=A067" /><p class="origImg">http://ckeditor.com/apps/ckeditor/3.1/images/spacer.gif?t=A067</p>5.4.2.1.1. Using PropertyEditorRegistrars</h5> 
       </div> 
      </div> 
      <div> 
      </div> 
     </div> 
     <p>Another mechanism for registering property editors with the Spring container is to create and use a PropertyEditorRegistrar. This interface is particularly useful when you need to use the same set of property editors in several different situations: write a corresponding registrar and reuse that in each case. PropertyEditorRegistrars work in conjunction with an interface called PropertyEditorRegistry, an interface that is implemented by the Spring BeanWrapper (and DataBinder). PropertyEditorRegistrars are particularly convenient when used in conjunction with the CustomEditorConfigurer (introduced <a title="5.4.2.1.&nbsp;Registering additional custom PropertyEditors" href="http://static.springsource.org/spring/docs/2.5.x/reference/validation.html#beans-beans-conversion-customeditor-registration">here</a>), which exposes a property called setPropertyEditorRegistrars(..): PropertyEditorRegistrars added to a CustomEditorConfigurer in this fashion can easily be shared with DataBinder and Spring MVC Controllers. Furthermore, it avoids the need for synchronization on custom editors: a PropertyEditorRegistrar is expected to create fresh PropertyEditor instances for each bean creation attempt.</p> 
     <p>Using a PropertyEditorRegistrar is perhaps best illustrated with an example. First off, you need to create your own PropertyEditorRegistrar implementation:</p> 
     <pre>package com.foo.editors.spring;

public final class CustomPropertyEditorRegistrar implements PropertyEditorRegistrar {

    public void registerCustomEditors(PropertyEditorRegistry registry) {

        // it is expected that new PropertyEditor instances are created
        registry.registerCustomEditor(ExoticType.class, new ExoticTypeEditor());

        // you could register as many custom property editors as are required here...
    }
}</pre> 
     <p>See also the org.springframework.beans.support.ResourceEditorRegistrar for an example PropertyEditorRegistrar implementation. Notice how in its implementation of the registerCustomEditors(..) method it creates new instances of each property editor.</p> 
     <p>Next we configure a CustomEditorConfigurer and inject an instance of our CustomPropertyEditorRegistrar into it:</p> 
     <pre>&lt;bean class=&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;&gt;
    &lt;property name=&quot;propertyEditorRegistrars&quot;&gt;
        &lt;list&gt;
            &lt;ref bean=&quot;customPropertyEditorRegistrar&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;customPropertyEditorRegistrar&quot; class=&quot;com.foo.editors.spring.CustomPropertyEditorRegistrar&quot;/&gt;</pre> 
     <p>Finally, and in a bit of a departure from the focus of this chapter, for those of you using <a title="Chapter&nbsp;13.&nbsp;Web MVC framework" href="http://static.springsource.org/spring/docs/2.5.x/reference/mvc.html">Spring's MVC web framework</a>, using PropertyEditorRegistrars in conjunction with data-binding Controllers (such as SimpleFormController) can be very convenient. Find below an example of using a PropertyEditorRegistrar in the implementation of an initBinder(..) method:</p> 
     <pre>public final class RegisterUserController extends SimpleFormController {

    private final PropertyEditorRegistrar customPropertyEditorRegistrar;

    public RegisterUserController(PropertyEditorRegistrar propertyEditorRegistrar) {
        this.customPropertyEditorRegistrar = propertyEditorRegistrar;
    }

    protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
        this.customPropertyEditorRegistrar.registerCustomEditors(binder);
    }

    // other methods to do with registering a User
}</pre> 
     <p>This style of PropertyEditor registration can lead to concise code (the implementation of initBinder(..) is just one line long!), and allows common PropertyEditor registration code to be encapsulated in a class and then shared amongst as many Controllers as needed.</p> 
    </div> 
   </div> 
  </div> 
 </div> 
</div></div></body></html>